diff --git a/src/.vitepress/locales.js b/src/.vitepress/locales.js
index 2c0be0c..11bde81 100644
--- a/src/.vitepress/locales.js
+++ b/src/.vitepress/locales.js
@@ -287,7 +287,10 @@ export const localeConfig = (langCode) => ({
               },
               {
                 text: get_i18n_str(langCode, "guides-aos-modules"),
-                link: get_i18n_link(langCode, "/guides/aos/modules/index"),
+                link: get_i18n_link(
+                  langCode,
+                  "/guides/aos/modules/why-migrate",
+                ),
                 collapsed: true,
                 items: [
                   {
@@ -379,6 +382,44 @@ export const localeConfig = (langCode) => ({
               },
             ],
           },
+          {
+            text: "Migrating to HyperBEAM",
+            link: get_i18n_link(
+              langCode,
+              "/guides/migrating-to-hyperbeam/index",
+            ),
+            collapsed: true,
+            items: [
+              {
+                text: "Exposing State",
+                link: get_i18n_link(
+                  langCode,
+                  "/guides/migrating-to-hyperbeam/exposing-process-state",
+                ),
+              },
+              {
+                text: "Reading Dynamic State",
+                link: get_i18n_link(
+                  langCode,
+                  "/guides/migrating-to-hyperbeam/reading-dynamic-state",
+                ),
+              },
+              {
+                text: "Connecting with aos",
+                link: get_i18n_link(
+                  langCode,
+                  "/guides/migrating-to-hyperbeam/aos-with-hyperbeam",
+                ),
+              },
+              {
+                text: "ao-connect & HyperBEAM",
+                link: get_i18n_link(
+                  langCode,
+                  "/guides/migrating-to-hyperbeam/ao-connect",
+                ),
+              },
+            ],
+          },
           {
             text: "Additional Technologies",
             collapsed: true,
diff --git a/src/guides/aoconnect/calling-dryrun.md b/src/guides/aoconnect/calling-dryrun.md
index 8d2d2b2..d50ea51 100644
--- a/src/guides/aoconnect/calling-dryrun.md
+++ b/src/guides/aoconnect/calling-dryrun.md
@@ -1,5 +1,9 @@
 # Calling DryRun
 
+::: warning DEPRECATION NOTICE
+This method of reading state is in the process of being deprecated for processes running on HyperBEAM. It is recommended to use the [State Patching mechanism](../migrating-to-hyperbeam/exposing-process-state.md) to expose state via HTTP for better performance, as calling `dryrun` was known to cause severe bottlenecks in web applications on `legacynet`.
+:::
+
 DryRun is the process of sending a message object to a specific process and getting the Result object back, but the memory is not saved, it is perfect to create a read message to return the current value of memory. For example, a balance of a token, or a result of a transfer, etc. You can use DryRun to obtain an output without sending an actual message.
 
 ```js
diff --git a/src/guides/migrating-to-hyperbeam/ao-connect.md b/src/guides/migrating-to-hyperbeam/ao-connect.md
new file mode 100644
index 0000000..fdae38d
--- /dev/null
+++ b/src/guides/migrating-to-hyperbeam/ao-connect.md
@@ -0,0 +1,107 @@
+# HyperBEAM from AO Connect
+
+This guide explains how to interact with a process using HyperBEAM and `aoconnect`.
+
+## Prerequisites
+
+- Node.js environment
+- `@permaweb/aoconnect` library
+- The latest version of aos
+- Wallet file (`wallet.json`) containing your cryptographic keys
+- A HyperBEAM node running with the genesis_wasm profile
+
+  ```bash
+  rebar3 as genesis_wasm shell
+  ```
+
+- The Process ID for a process created with genesis_wasm (this is the default in the latest version of aos).
+
+## Step 1: Environment Setup
+
+Install necessary dependencies:
+
+```bash
+npm install @permaweb/aoconnect
+```
+
+Ensure your wallet file (`wallet.json`) is correctly formatted and placed in your project directory.
+
+:::info
+You can create a test wallet using this command:
+`npx -y @permaweb/wallet > wallet.json`
+:::
+
+## Step 2: Establish Connection
+
+Create a new JavaScript file (e.g., `index.js`) and set up your Permaweb connection. You will need a `processId` of a process that you want to interact with.
+
+```javascript
+import { connect, createSigner } from "@permaweb/aoconnect";
+import fs from "node:fs";
+
+const jwk = JSON.parse(fs.readFileSync("wallet.json", "utf-8"));
+
+// The Process ID to interact with
+const processId = "<your genesis_wasm generated process id>";
+
+const { request } = connect({
+  MODE: "mainnet",
+  URL: "http://localhost:8734",
+  signer: createSigner(jwk),
+});
+```
+
+## Step 3: Pushing a Message to a Process
+
+Use the `request` function to send a message to the process. In `aoconnect`, this is done by using the `push` path parameter.
+
+```javascript
+const processResult = await request({
+  path: `/${processId}~process@1.0/push/serialize~json@1.0`,
+  method: "POST",
+  target: processId,
+  signingFormat: "ANS-104",
+});
+
+console.log(processResult);
+```
+
+## Full Example
+
+To run the full script, combine the snippets from Step 2 and 3 into `index.js`:
+
+```javascript
+import { connect, createSigner } from "@permaweb/aoconnect";
+import fs from "node:fs";
+
+const jwk = JSON.parse(fs.readFileSync("wallet.json", "utf-8"));
+
+const processId = "<your genesis_wasm generated process id>";
+
+const { request } = connect({
+  MODE: "mainnet",
+  URL: "http://localhost:8734",
+  signer: createSigner(jwk),
+});
+
+const processResult = await request({
+  path: `/${processId}~process@1.0/push/serialize~json@1.0`,
+  method: "POST",
+  target: processId,
+  signingFormat: "ANS-104",
+});
+
+console.log(processResult);
+```
+
+Now, run it:
+
+```bash
+node index.js
+```
+
+You should see an object logged to the console, containing the ID of the message that was sent.
+
+## Conclusion
+
+Following these steps, you've successfully sent a message to a process. This is a fundamental interaction for building applications on hyperAOS.
diff --git a/src/guides/migrating-to-hyperbeam/aos-with-hyperbeam.md b/src/guides/migrating-to-hyperbeam/aos-with-hyperbeam.md
new file mode 100644
index 0000000..ff41f68
--- /dev/null
+++ b/src/guides/migrating-to-hyperbeam/aos-with-hyperbeam.md
@@ -0,0 +1,58 @@
+# Connecting to HyperBEAM with `aos`
+
+This guide explains how to use `aos`, the command-line interface for AO, to connect to a HyperBEAM node for development.
+
+## Installing `aos`
+
+The primary tool for interacting with AO and developing processes is `aos`, a command-line interface and development environment.
+
+::: code-group
+
+```bash [npm]
+npm i -g https://get_ao.arweave.net
+```
+
+```bash [pnpm]
+pnpm add -g https://get_ao.arweave.net
+```
+
+```bash [bun]
+# Bun is not supported yet
+# bun install -g https://get_ao.arweave.net
+```
+
+:::
+
+## Connecting to a HyperBEAM Node
+
+While you don't need to run a HyperBEAM node yourself, you do need to connect to one to interact with the network during development.
+
+To start `aos` and connect to a public HyperBEAM node, simply run the command in your terminal:
+
+```bash
+aos --mainnet "https://router-1.forward.computer" myMainnetProcess
+```
+
+This connects you to an interactive Lua environment running within a **process** on the AO network. This process acts as your command-line interface (CLI) to the AO network. When you specify `--mainnet <URL>`, it connects to the `genesis_wasm` device running on the HyperBEAM node at the supplied URL, allowing you to interact with other processes, manage your wallet, and develop new AO processes.
+
+:::info Running a Local HyperBEAM Node
+If you are running HyperBEAM locally and want to use that node when booting up `aos`, you must first start your local node with the genesis_wasm profile:
+
+```bash
+rebar3 as genesis_wasm shell
+```
+
+Then, you can connect `aos` to it:
+
+```bash
+aos --mainnet "http://localhost:8734" myLocalProcess
+```
+
+Until `aos` is fully HyperBEAM native, the genesis_wasm profile is required to run a local Compute Unit (CU) for executing `aos`.
+:::
+
+## Interacting with Mainnet Processes
+
+:::warning Note on Blocking Calls
+Blocking message patterns, such as `Receive` and `ao.send().receive()`, are not available when running `aos` against a HyperBEAM process. HyperBEAM processes do not support the underlying `wasm` modules required for this functionality. You should rely on asynchronous patterns using handlers instead.
+:::
diff --git a/src/guides/migrating-to-hyperbeam/exposing-process-state.md b/src/guides/migrating-to-hyperbeam/exposing-process-state.md
new file mode 100644
index 0000000..2521379
--- /dev/null
+++ b/src/guides/migrating-to-hyperbeam/exposing-process-state.md
@@ -0,0 +1,114 @@
+# Exposing Process State to HyperBEAM
+
+HyperBEAM introduces a powerful feature for exposing parts of a process's state for immediate reading over HTTP. This improves performance for web frontends and data services by replacing the need for `dryrun` calls, which were a known bottleneck on `legacynet`.
+
+## The Patch Device
+
+The [`~patch@1.0`](https://hyperbeam.arweave.net/build/devices/source-code/dev_patch.md) device is the mechanism that allows AO processes to make parts of their internal state readable via direct HTTP GET requests.
+
+### How it Works
+
+Exposing state is a four-step process involving your process and HyperBEAM:
+
+1.  **Process Logic:** From your process (e.g., in Lua or WASM), send an outbound message to the `~patch@1.0` device.
+2.  **Patch Message Format:** The message must include `device` and `cache` tags.
+    ```lua
+    Send({ Target = ao.id, device = 'patch@1.0', cache = { mydatakey = MyValue } })
+    ```
+3.  **HyperBEAM Execution:** HyperBEAM's `dev_patch` module processes this message, mapping the key-value pairs from the `cache` table to a URL path.
+4.  **HTTP Access:** The exposed data is then immediately available via a standard HTTP GET request to the process's endpoint.
+    ```
+    GET /<process-id>~process@1.0/compute/cache/<mydatakey>
+    ```
+
+### Initial State Sync (Optional)
+
+To make data available immediately on process creation, you can patch its initial state. A common pattern is to use a flag to ensure this sync only runs once, as shown in this example for a token's `Balances` and `TotalSupply`.
+
+```lua
+-- Place this logic at the top level of your process script,
+-- outside of specific handlers, so it runs on load.
+
+Balances = { token1 = 100, token2 = 200 } -- A table of balances
+TotalSupply = 1984 -- A single total supply value
+
+-- 1. Initialize Flag:
+-- Initializes a flag if it doesn't exist.
+InitialSync = InitialSync or 'INCOMPLETE'
+
+-- 2. Check Flag:
+-- Checks if the sync has already run.
+if InitialSync == 'INCOMPLETE' then
+  -- 3. Patch State:
+  -- The `Send` call patches the state, making it available at endpoints like:
+  -- /cache/balances
+  -- /cache/totalsupply
+  Send({ device = 'patch@1.0', cache = { balances = Balances, totalsupply = TotalSupply } })
+  -- 4. Update Flag:
+  -- Updates the flag to prevent the sync from running again.
+  InitialSync = 'COMPLETE'
+  print("Initial state sync complete. Balances and TotalSupply patched.")
+end
+```
+
+This pattern makes essential data queryable upon process creation, boosting application responsiveness.
+
+### Example (Lua in `aos`)
+
+This handler exposes a `currentstatus` key that can be read via HTTP after the `PublishData` action is called.
+
+```lua
+-- In your process code (e.g., loaded via .load)
+Handlers.add(
+  "PublishData",
+  Handlers.utils.hasMatchingTag("Action", "PublishData"),
+  function (msg)
+    local dataToPublish = "Some important state: " .. math.random()
+    -- Expose 'currentstatus' key under the 'cache' path
+    Send({ device = 'patch@1.0', cache = { currentstatus = dataToPublish } })
+    print("Published data to /cache/currentstatus")
+  end
+)
+```
+
+### Avoiding Key Conflicts
+
+Keys in the `cache` table become URL path segments. To avoid conflicts with reserved HyperBEAM paths, use descriptive, specific keys. Avoid using reserved keywords such as:
+
+```
+now, compute, state, info, test
+```
+
+For instance, prefer a key like `myappstate` over a generic key like `state`.
+
+::: warning
+HTTP paths are case-insensitive. While the `patch` device stores keys with case sensitivity (e.g., `MyKey` vs `mykey`), HTTP access to paths like the following is ambiguous and may lead to unpredictable results:
+
+```
+/cache/MyKey
+/cache/mykey
+```
+
+To prevent conflicts, **always use lowercase keys** in your `cache` table (e.g., `mykey`, `usercount`).
+:::
+
+## Key Points
+
+- **Path Structure:** Data is exposed at a path structured like this, where `<key>` is a key from your `cache` table:
+  ```HyperBEAM
+  https://<hyperbeam-node-url>/<process-id>~process@1.0/cache/<key>
+  ```
+- **Data Types:** Basic data types like strings and numbers work best. Complex objects may require serialization.
+- **`compute` vs `now`:** Accessing patched data can be done via two main paths:
+  ```HyperBEAM
+  https://<hyperbeam-node-url>/<process-id>~process@1.0/compute/cache/...
+  https://<hyperbeam-node-url>/<process-id>~process@1.0/now/cache/...
+  ```
+  The `compute` endpoint serves the last known value quickly, while `now` may perform additional computation to get the most recent state.
+- **Read-Only Exposure:** Patching is for efficient reads and does not replace your process's core state management logic.
+
+Using the `patch` device enables efficient, standard HTTP access to your process state, seamlessly connecting decentralized logic with web applications.
+
+## Next Steps
+
+Now that you know how to expose static state, learn how to perform on-the-fly computations on that state by [reading dynamic state](./reading-dynamic-state.md).
diff --git a/src/guides/migrating-to-hyperbeam/reading-dynamic-state.md b/src/guides/migrating-to-hyperbeam/reading-dynamic-state.md
new file mode 100644
index 0000000..468e2c3
--- /dev/null
+++ b/src/guides/migrating-to-hyperbeam/reading-dynamic-state.md
@@ -0,0 +1,115 @@
+# Reading Dynamic State
+
+Beyond reading static, cached state from your process, HyperBEAM allows you to perform on-the-fly computations on that state using Lua. This guide explains how to create and use "transformation functions" to return dynamic, computed data without altering the underlying state of your process.
+
+This is a powerful pattern for creating efficient data APIs for your applications, reducing client-side logic, and minimizing data transfer.
+
+This guide assumes you are already familiar with [exposing static process state](./exposing-process-state.md).
+
+## How it Works: The Lua Device
+
+The magic behind this is the `lua@5.3a` device, which can execute a Lua script against a message. In this pattern, we use a HyperBEAM URL (hashpath) to construct a pipeline:
+
+1.  First, we grab the latest state of an AO process.
+2.  Then, we pipe that state as the `base` message into the `lua@5.3a` device.
+3.  We tell the Lua device which script to load (from an Arweave transaction) and which function to execute.
+4.  The function runs, processing the `base` state.
+5.  Finally, the result of the function is returned over HTTP.
+
+## Example: Calculating Circulating Supply
+
+Let's consider a practical example: a token process where we have patched the `Balances` table to be readable. Rather than forcing clients to download all balance data to compute the total supply, we can do it on the HyperBEAM node.
+
+### 1. The Transformation Function
+
+First, create a Lua script (`sum.lua`) with a function that takes the state (`base`) and calculates the sum of balances.
+
+```lua
+-- sum.lua
+function sum(base, req)
+  -- Initialize total supply counter
+  local totalSupply = 0
+  local total = 0
+
+  -- Check if we have balances in our state
+  if base.balances then
+    -- Iterate through all balances and sum them
+    for address, balance in pairs(base.balances) do
+      -- Ensure balance is a number and add to total
+      local numBalance = tonumber(balance) or 0
+      totalSupply = totalSupply + numBalance
+      total = total + 1
+    end
+  end
+
+  -- Return the computed result as a table
+  return {
+    CirculatingSupply = tostring(math.floor(totalSupply)),
+    BalanceCount = tostring(math.floor(total))
+  }
+end
+```
+
+The transformation function receives two arguments:
+
+- **`base`**: The message being processed, which in our pipeline will be the cached state data from your process.
+- **`req`**: The incoming request object, which contains parameters and other metadata.
+
+### 2. Publishing the Function
+
+Next, publish your Lua script to Arweave. The `arx` CLI tool is recommended for this.
+
+```bash
+# Install arx globally
+npm i -g @permaweb/arx
+
+# Upload your Lua function to Arweave
+arx upload sum.lua \
+-w PATH_TO_WALLET.json \
+-t arweave \
+--content-type application/lua \
+--tags Data-Protocol ao
+```
+
+`arx` will return a transaction ID for your script. Let's say it's `LUA_SCRIPT_TX_ID`.
+
+### 3. Calling the Function
+
+With the process ID (`YOUR_PROCESS_ID`) and the script transaction ID (`LUA_SCRIPT_TX_ID`), you can construct a URL to call your function:
+
+```HyperBEAM URL
+GET /<YOUR_PROCESS_ID>~process@1.0/now/~lua@5.3a&module={LUA_SCRIPT_TX_ID}/sum/serialize~json@1.0
+```
+
+This URL breaks down as follows:
+
+- `/{YOUR_PROCESS_ID}~process@1.0`: Targets the AO process and its state.
+- `/now`: Gets the most current state.
+- `/~lua@5.3a&module={LUA_SCRIPT_TX_ID}`: This is the key part. It tells HyperBEAM to take the output of the previous step (the process state) and process it with the `lua@5.3a` device, loading your script from the `module` transaction.
+- `/sum`: Calls the `sum` function within your Lua script.
+- `/serialize~json@1.0`: Takes the table returned by your function and serializes it into a JSON object.
+
+### 4. Integrating into an Application
+
+Here's how you could fetch this dynamic data in a JavaScript application:
+
+```javascript
+// Fetch circulating supply with JSON serialization
+const processId = "FkJPkIHp_Gc_7KOLbtyzowPcJUc3SG_G25SJp0fbTmE"; // An example process
+const moduleId = "QSBQZsowVRdvsEbdTv-KEF4_Z5bYf11M3X5-8LN0NM4"; // The example sum.lua script
+const hyperbeam = "router-1.forward.computer";
+
+async function getDynamicState() {
+  const url = `https://${hyperbeam}/${processId}~process@1.0/now/~lua@5.3a&module=${moduleId}/sum/serialize~json@1.0`;
+
+  const response = await fetch(url);
+  const data = await response.json();
+
+  console.log(`Total Supply: ${data.circulatingsupply}`);
+  console.log(`Token Holders: ${data.balancecount}`);
+}
+
+getDynamicState();
+```
+
+This approach significantly improves performance by offloading computation from the client to the HyperBEAM node and reducing the amount of data sent over the network.
diff --git a/src/guides/migrating-to-hyperbeam/why-migrate.md b/src/guides/migrating-to-hyperbeam/why-migrate.md
new file mode 100644
index 0000000..7634d34
--- /dev/null
+++ b/src/guides/migrating-to-hyperbeam/why-migrate.md
@@ -0,0 +1,13 @@
+# Why Migrate to HyperBEAM?
+
+Migrating processes from `legacynet` to HyperBEAM is essential for leveraging significant advancements in performance, features, and developer experience on AO.
+
+HyperBEAM is a new, more robust foundation for decentralized applications on AO, offering several key advantages:
+
+- **Enhanced Performance:** Built on an architecture optimized for concurrency, HyperBEAM provides faster message scheduling and more responsive applications.
+- **Direct State Access:** HyperBEAM allows processes to expose their state directly via HTTP. This enables immediate reads of your process's data, eliminating the need for [dry-run](../aoconnect/calling-dryrun.md) messages which were a common performance bottleneck.
+- **Easy Extensibility:** It allows core feature extensibility through [modular devices](https://hyperbeam.arweave.net/build/devices/hyperbeam-devices.md).
+
+The most impactful change when migrating is the ability to expose parts of your process state for immediate reading. This dramatically improves the performance of web frontends and data-driven services.
+
+To learn how to implement this, see [Exposing Process State](./exposing-process-state.md).
diff --git a/src/public/ja/llms-full.txt b/src/public/ja/llms-full.txt
index 4da08f0..96cf155 100644
--- a/src/public/ja/llms-full.txt
+++ b/src/public/ja/llms-full.txt
@@ -1,6 +1,6 @@
 # JA Technical Documentation
 
-Generated: 2025-06-13T20:13:28.050Z
+Generated: 2025-06-17T16:58:11.855Z
 
 This file contains technical reference documentation and release notes.
 
diff --git a/src/public/ja/llms.txt b/src/public/ja/llms.txt
index 0b8a9e5..6213414 100644
--- a/src/public/ja/llms.txt
+++ b/src/public/ja/llms.txt
@@ -1,6 +1,6 @@
 # JA Documentation for LLMs
 
-Generated: 2025-06-13T20:13:28.050Z
+Generated: 2025-06-17T16:58:11.855Z
 
 This file contains structured reference documentation, release notes, and a comprehensive directory of all documentation pages.
 
diff --git a/src/public/llms-full.txt b/src/public/llms-full.txt
index 327e6a2..b308620 100644
--- a/src/public/llms-full.txt
+++ b/src/public/llms-full.txt
@@ -1,6 +1,6 @@
 # EN Technical Documentation
 
-Generated: 2025-06-13T20:13:28.020Z
+Generated: 2025-06-17T16:58:11.835Z
 
 This file contains technical reference documentation and release notes.
 
@@ -513,7 +513,7 @@ end)
 For persistent processing, set up a handler:
 
 ```lua
-Handlers.add("process-ardrive",
+Handlers.add("ProcessArDriveFiles",
   { Tags = { ["App-Name"] = "ArDrive-App" } },
   function(msg)
     print(msg.Tags["App-Name"])
@@ -801,7 +801,7 @@ Source: https://cookbook_ao.arweave.net/references/glossary.html
 
 <style>
   .glossary-iframe {
-    height: 400px;
+    height: 500px;
     width: 100%;
     border: none;
   }
@@ -1914,7 +1914,7 @@ Source: https://cookbook_ao.arweave.net/releasenotes/aos-2_0_0.html
 ## Install instructions for AOS 2.0.0
 
 ```shell
-npm i -g https://get_ao.g8way.io
+npm i -g https://get_ao.arweave.net
 ```
 
 > Use `.update` to update earlier aos processes. See the **note** below on what features are not supported on earlier processes.
diff --git a/src/public/llms.txt b/src/public/llms.txt
index 4b2d5fb..411e962 100644
--- a/src/public/llms.txt
+++ b/src/public/llms.txt
@@ -1,6 +1,6 @@
 # EN Documentation for LLMs
 
-Generated: 2025-06-13T20:13:28.021Z
+Generated: 2025-06-17T16:58:11.836Z
 
 This file contains structured reference documentation, release notes, and a comprehensive directory of all documentation pages.
 
@@ -72,6 +72,14 @@ This file contains structured reference documentation, release notes, and a comp
 
 - [AO Dev-Cli 0.1](https://cookbook_ao.arweave.net/guides/dev-cli/index.html)
 
+### Migrating to hyperbeam
+
+- [Connecting to HyperBEAM with `aos`](https://cookbook_ao.arweave.net/guides/migrating-to-hyperbeam/aos-with-hyperbeam.html)
+- [Exposing Process State to HyperBEAM](https://cookbook_ao.arweave.net/guides/migrating-to-hyperbeam/exposing-process-state.html)
+- [HyperBEAM from AO Connect](https://cookbook_ao.arweave.net/guides/migrating-to-hyperbeam/ao-connect.html)
+- [Reading Dynamic State](https://cookbook_ao.arweave.net/guides/migrating-to-hyperbeam/reading-dynamic-state.html)
+- [Why Migrate to HyperBEAM?](https://cookbook_ao.arweave.net/guides/migrating-to-hyperbeam/index.html)
+
 ### Snacks
 
 #### 0rbit
@@ -350,7 +358,7 @@ Source: https://cookbook_ao.arweave.net/references/glossary.html
 
 <style>
   .glossary-iframe {
-    height: 400px;
+    height: 500px;
     width: 100%;
     border: none;
   }
@@ -645,5 +653,5 @@ Changes:
 # Summary
 
 Total files processed: 18
-Total documentation pages: 98
+Total documentation pages: 103
 This documentation is focused on technical references and release notes, prioritizing accuracy and relevance for LLM processing.
diff --git a/src/public/zh/llms-full.txt b/src/public/zh/llms-full.txt
index adad897..91ce852 100644
--- a/src/public/zh/llms-full.txt
+++ b/src/public/zh/llms-full.txt
@@ -1,6 +1,6 @@
 # ZH Technical Documentation
 
-Generated: 2025-06-13T20:13:28.041Z
+Generated: 2025-06-17T16:58:11.849Z
 
 This file contains technical reference documentation and release notes.
 
diff --git a/src/public/zh/llms.txt b/src/public/zh/llms.txt
index e929c6d..3d41c78 100644
--- a/src/public/zh/llms.txt
+++ b/src/public/zh/llms.txt
@@ -1,6 +1,6 @@
 # ZH Documentation for LLMs
 
-Generated: 2025-06-13T20:13:28.041Z
+Generated: 2025-06-17T16:58:11.849Z
 
 This file contains structured reference documentation, release notes, and a comprehensive directory of all documentation pages.
 
diff --git a/src/welcome/ao-processes.md b/src/welcome/ao-processes.md
index 8ef7dd1..9598d02 100644
--- a/src/welcome/ao-processes.md
+++ b/src/welcome/ao-processes.md
@@ -34,4 +34,4 @@ The persistent and concurrent nature of AO Processes makes them ideal for a wide
 
 ## Next Steps
 
-Now that you understand the capabilities of AO Processes, the next step is to dive into [Hyperbeam](./legacynet-info/index), the high-performance network that powers them.
+Now that you understand the capabilities of AO Processes, the next step is to dive into [Hyperbeam](../../guides/migrating-to-hyperbeam/index.md), the high-performance network that powers them.
diff --git a/src/welcome/legacynet-info/index.md b/src/welcome/legacynet-info/index.md
index 0e5bd55..f9d3845 100644
--- a/src/welcome/legacynet-info/index.md
+++ b/src/welcome/legacynet-info/index.md
@@ -31,7 +31,11 @@ The goal is to provide a seamless future upgrade path to HyperBEAM Mainnet. Whil
 
 ## HyperBEAM Documentation
 
-For detailed documentation on HyperBEAM, including how to build on it and run nodes, visit [HyperBEAM.arweave.net](https://hyperbeam.arweave.net).
+For detailed documentation on the HyperBEAM protocol itself, including running infrastructure and leveraging its powerful URL pathing, visit [HyperBEAM.arweave.net](https://hyperbeam.arweave.net).
+
+::: info Building on HyperBEAM
+To learn how to build applications on HyperBEAM using `ao` and `aos`, and to migrate existing processes, see the [Migrating to HyperBEAM Guide](../../guides/migrating-to-hyperbeam/why-migrate.md).
+:::
 
 ## Preparing for the Future
 
@@ -42,57 +46,3 @@ While you build on Legacynet, you can prepare for the future of AO by:
 - Building with the knowledge that a seamless migration path to HyperBEAM Mainnet is a core priority.
 
 This transition is a significant step forward for the AO ecosystem, ensuring that we can deliver on the promise of decentralized, hyper-parallel computation at any scale.
-
-## Get involved with the ao legacynet
-
-On February 27, 2024, `ao` legacynet was launched, for developers and early adopters to explore the hyper parallel computer.
-
-## What is the ao legacynet?
-
-The `ao` legacynet is setup to allow users to interact with the `ao` computer without fees, to test and build towards mainnet.
-
-The best way to get involved is to build and use the `ao` computer with the `aos` console.
-In the `Things to do` section below you will find many activities to try.
-
-## Installing the aos client
-
-Once you have [NodeJS](https://nodejs.org) on your machine, all you need to do is install `aos` and run it:
-
-```sh
-$ npm i -g https://get_ao.arweave.net
-```
-
-Running this command at a later date will upgrade `aos` to the latest version.
-After installation, we can simply run the command itself to start a new `aos` process:
-
-```sh
-$ aos
-```
-
-This will start a process named `default`. See [the aos guide](/guides/aos/index) for more details.
-
-## First steps in the ao legacynet
-
-Follow the tutorials and learn to build on `ao`. [Begin](/tutorials/begin/index)
-
-## Joining ao's native community chat
-
-The ao network hosts a number of chat servers that allow you to converse with other devs,
-right from your `aos` console. To load the chat client run the following:
-
-```lua
-aos> .load-blueprint chat
-```
-
-To show the available rooms you can run:
-
-```lua
-aos> List()
-```
-
-You can join a room and start chatting with other devs as follows:
-
-```lua
-aos> Join("Getting-Started", "yourName")
-aos> Say("Hi")
-```
